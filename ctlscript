#!/bin/bash

usage() {
    echo "Usage:"
    echo
    echo "  ctlscript [--scope=system|home|all] install                 - copy the files from the git repository to the system, making first a backup"
	echo "  ctlscript [--scope=system|home|all] update                  - update the files in the git repository with those of the system"
	echo "  ctlscript restore <timestamp>                               - restore a backup made by the install command"
}


# Parse the input
parse_input()
{
	# parse the options
	scope="all"
	while test -n "$1"; do
		case "$1" in
			--scope=*)
				scope=${1#--scope=}
				case $tempscope in
					system|home|all)
						shift
						;;
					*)
						echo "Unknown scope: $scope"
						exit 1;;
				esac
				unset tempscope
				;;
			--*)
				echo "Unknown option: $1"
				usage
				exit 1
				;;
			*)
				break
				;;
		esac
	done

	# parse the command
	if test -n "$1"; then
		case "$1" in
			install|update|restore)
				command=$1
				shift
				;;
			*)
				echo "Unknown command: $1"
				usage
				exit 1
				;;
		esac
	else
		echo "Please specify a command"
		usage
		exit 1
	fi

	# The restore command NEEDS a backup directory
	if test "$command" = "restore"; then
		if test -n "$1"; then
			if test -d "backup/$1"; then
				backupdir="backup/$1"
				shift
			else
				echo "There is no directory in backup/ with the given name"
				usage
				exit 1
			fi
		else
			echo "Please specify a backup directory to do the backup"
			usage
			exit 1
		fi
	fi
}

parse_input "$@"

##########################################################################################

# Prints the repo paths
getrepopaths()
{
	case "$scope" in
		system) find files -not \( -path files/home -prune \) -type f ;;
		home) find files/home/ -type f ;;
		all) find files -type f ;;
	esac
}

# Prints the real paths on the system
getsystempaths()
{
	sed -e "s/files//" <<<"$(getrepopaths)" | sed -e "s#\/home#$HOME#"
}

# Install
if [ "$command" = "install" ]; then
	# Create a backup associated to the actual timestamp
	timestamp=$(date +%s)
	mkdir -p "backup/$timestamp"

	# Copy the respective file in the system making first a backup
	for item in $(getsystempaths); do
		if test -f "$item"; then
			cp --parents "$item" "backup/$timestamp/"
		fi
		reponame=${item//$HOME/\/home}
		if [[ "$item" =~ ^"$HOME" ]]; then
			cp files"$reponame" "$item"
		else
			sudo cp files"$reponame" "$item"
		fi
		echo "$item replaced"
	done
	exit 0
fi


# Update
if test "$command" = "update"; then
	files=$(getsystempaths)
	for item in $files; do
		reponame=${item//$HOME/\/home}
		cp -p "$item" files"$reponame"
		echo "files$reponame updated"
	done
	exit 0
fi


# Restore
if test "$command" = "restore"; then
	files=$(find "$backupdir" -type f)
	for item in $files; do
		name=${item#$backupdir}
		if [[ "$name" =~ ^"$HOME" ]]; then
			cp "$item" "$name"
		else
			sudo cp "$item" "$name"
		fi
		echo "$name restored"
	done
	exit 0
fi
